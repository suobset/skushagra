"use strict";(self.webpackChunkskushagra=self.webpackChunkskushagra||[]).push([[93],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||h[d]||s;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:8},i="SaberStat",o={unversionedId:"finechive/saberstat",id:"finechive/saberstat",title:"SaberStat",description:"Currently under development: watchOS and iOS app to measure hits/misses during a lightsaber match.",source:"@site/docs/finechive/saberstat.md",sourceDirName:"finechive",slug:"/finechive/saberstat",permalink:"/docs/finechive/saberstat",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Scripting Shenanigans",permalink:"/docs/finechive/scripting-shenanigans"}},l={},p=[{value:"Old Screenshots",id:"old-screenshots",level:2}],c={toc:p},u="wrapper";function h(e){let{components:t,...s}=e;return(0,a.kt)(u,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"saberstat"},"SaberStat"),(0,a.kt)("p",null,"Currently under development: watchOS and iOS app to measure hits/misses during a lightsaber match. "),(0,a.kt)("p",null,(0,a.kt)("del",{parentName:"p"},"Personally, I stand firm to the belief of ",(0,a.kt)("a",{parentName:"del",href:"/disclaimer_fsf"},"GPL'ing everything"),". However, given the idea, and the tools at my disposal, creating an Apple Watch app and licensing it under MIT is the best step forward.")),(0,a.kt)("p",null,"This is a fully Python-based application, and completely Libre. Sensor data is logged into a host computer via UDP, and fancy math is under development."),(0,a.kt)("p",null,"We plan to use the ",(0,a.kt)("a",{parentName:"p",href:"https://www.pine64.org/pinetime/"},"PineTime"),", a fully libre watch for getting sensor data. We plan to use open standards throughout as well."),(0,a.kt)("p",null,"While initial testing is taking place on an Apple Watch (since that is what I have at my disposal), rest assured this will move to a fully libre solution. Due to the Apple Watch restriction, the app is currently MPL. Upon getting a PineTime, I plan to shift it under GPLv3."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Example of Packet in working demo",src:n(5495).Z,width:"1536",height:"931"})),(0,a.kt)("p",null,"Packet with sensor data from watch to host laptop. Sensor data is logged every ms and sent every s, so each packet has 1000 entries."),(0,a.kt)("p",null,"Follow Development Here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/suobset/SaberStat"},"https://github.com/suobset/SaberStat")),(0,a.kt)("h2",{id:"old-screenshots"},"Old Screenshots"),(0,a.kt)("p",null,"Initially, this started as an Apple app for development and concept...since I had one at disposal. We are no longer pursuing that path, given Apple's proprietary nature towards everything."),(0,a.kt)("p",null,"The Watch is still used for current sensor dev purposes, using ","[Sensor Logger]",": an open-source iOS + watchOS sensor logger that can send data over HTTP POST. "),(0,a.kt)("p",null,"I have set up my host machine as a UDP server to handle such requests. "),(0,a.kt)("p",null,"The desktop counterpart will (probably) not have to be changed with the PineTime. "),(0,a.kt)("p",null,"Old screenshots, for archival purposes:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"watchOS Screenshot",src:n(5420).Z,width:"592",height:"644"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"iOS Screenshot",src:n(971).Z,width:"582",height:"900"})),(0,a.kt)("p",null,"The iOS counterpart will now be done on a computer, with UI from ",(0,a.kt)("inlineCode",{parentName:"p"},"tkinter")))}h.isMDXComponent=!0},5420:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/saberstat-scrnsht1-8a48324439c2e3c21fad3aebef64ebf9.png"},971:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/saberstat-scrnsht2-4a03a1c6ef7de4f02cfb1d4051d556fc.png"},5495:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/saberstatPacket-2aeb96b8fcfb8c299ddc54b529561611.png"}}]);